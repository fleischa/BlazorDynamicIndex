namespace BlazorDynamicIndex;

using System.Reflection;
using System.Text;

public static class DynamicIndexGenerator
{
	public static async Task<string> Generate(DynamicIndexConfiguration configuration)
	{
		StringBuilder builder = new();

		Assembly executingAssembly = Assembly.GetExecutingAssembly();

		builder.AppendLine($"<!-- This file was generated by {executingAssembly.FullName} -->");
		builder.AppendLine("<!DOCTYPE html>");

		if (string.IsNullOrEmpty(configuration.Lang))
		{
			builder.AppendLine("<html>");
		}
		else
		{
			builder.AppendLine($"<html lang=\"{configuration.Lang}\">");
		}

		builder.AppendLine("<head>");

		builder.AppendLine("<meta charset=\"utf-8\" />");

		if (!string.IsNullOrEmpty(configuration.Viewport))
		{
			builder.AppendLine($"<meta name=\"viewport\" content=\"{configuration.Viewport}\" />");
		}

		if (!string.IsNullOrEmpty(configuration.Title))
		{
			builder.AppendLine($"<title>{configuration.Title}</title>");
		}

		if (string.IsNullOrEmpty(configuration.Base))
		{
			builder.AppendLine("<base href=\"/\" />");
		}
		else
		{
			builder.AppendLine($"<base href=\"{configuration.Base}\" />");
		}

		if (configuration.Icons.Any())
		{
			builder.AppendLine("<!-- Icons -->");
			foreach (IconReference icon in configuration.Icons)
			{
				builder.AppendLine(icon.HtmlElement);
			}
		}

		if (configuration.StyleSheets.Any())
		{
			builder.AppendLine("<!-- Style Sheets -->");
			foreach (StyleSheetReference styleSheet in configuration.StyleSheets)
			{
				builder.AppendLine(styleSheet.HtmlElement);
			}
		}

		if (configuration.HeadScripts.Any())
		{
			builder.AppendLine("<!-- Head Scripts -->");
			foreach (ScriptReference script in configuration.HeadScripts)
			{
				builder.AppendLine(script.HtmlElement);
			}
		}

		builder.AppendLine("</head>");

		builder.AppendLine("<body>");

		if (configuration.PreBodyScripts.Any())
		{
			builder.AppendLine("<!-- Pre Body Scripts -->");
			foreach (ScriptReference script in configuration.PreBodyScripts)
			{
				builder.AppendLine(script.HtmlElement);
			}
		}

		if (!string.IsNullOrEmpty(configuration.BodyFile))
		{
			await using FileStream bodyFileStream = File.OpenRead(configuration.BodyFile);
			using StreamReader bodyStreamReader = new(bodyFileStream, Encoding.UTF8);
			builder.AppendLine((await bodyStreamReader.ReadToEndAsync()).Trim());
		}

		if (configuration.PreFrameworkScripts.Any())
		{
			builder.AppendLine("<!-- Pre Blazor Framework Scripts -->");
			foreach (ScriptReference script in configuration.PreFrameworkScripts)
			{
				builder.AppendLine(script.HtmlElement);
			}
		}

		if (configuration.FrameworkScript != null)
		{
			builder.AppendLine(configuration.FrameworkScript.HtmlElement);
		}
		else
		{
			builder.AppendLine("<script src=\"_framework/blazor.webassembly.js\"></script>");
		}

		if (configuration.PostFrameworkScripts.Any())
		{
			builder.AppendLine("<!-- Post Blazor Framework Scripts -->");
			foreach (ScriptReference script in configuration.PostFrameworkScripts)
			{
				builder.AppendLine(script.HtmlElement);
			}
		}

		builder.AppendLine("</body>");

		builder.AppendLine("</html>");

		return builder.ToString();
	}
}
